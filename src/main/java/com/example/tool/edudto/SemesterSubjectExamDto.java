package com.example.tool.edudto;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.globits.core.dto.RoomDto;
import com.globits.core.dto.TrainingBaseDto;
import com.globits.education.domain.ExamType;
import com.globits.education.domain.PrerequisiteSubject;
import com.globits.education.domain.SemesterSubject;
import com.globits.education.domain.SemesterSubjectExam;
import com.globits.education.domain.SemesterSubjectExamCourseSubject;
import com.globits.education.domain.SemesterSubjectExamDate;
import com.globits.education.domain.SemesterSubjectExamRoom;
import com.globits.education.domain.StudentSemesterSubjectExam;
import com.globits.education.domain.StudentSemesterSubjectExamRoom;
import com.globits.education.domain.Subject;
import com.globits.education.domain.TestBag;
import com.globits.education.domain.TrainingBaseSemesterSubject;
import com.globits.education.domain.TrainingBaseSemesterSubjectExam;
import com.globits.education.dto.CourseHourDto;
import com.globits.education.dto.CourseSubjectDto;
import com.globits.education.dto.CourseYearDto;
import com.globits.education.dto.ExamHourDto;
import com.globits.education.dto.ExamRegisterPeriodDto;
import com.globits.education.dto.ExamSkillDto;
import com.globits.education.dto.ExamTypeDto;
import com.globits.education.dto.SemesterDto;
import com.globits.education.dto.SemesterRegisterPeriodDto;
import com.globits.education.dto.SemesterSubjectDto;
import com.globits.education.dto.SemesterSubjectExamCourseSubjectDto;
import com.globits.education.dto.SemesterSubjectExamDateDto;
import com.globits.education.dto.SemesterSubjectExamRoomDto;
import com.globits.education.dto.StudentSemesterSubjectExamDto;
import com.globits.education.dto.StudentSemesterSubjectExamRoomDto;
import com.globits.education.dto.SubjectDto;
import com.globits.education.dto.TestBagDto;
import com.globits.education.dto.TrainingBaseSemesterSubjectExamDto;

public class SemesterSubjectExamDto implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private Long id;
	private String name;//Tên tổng hợp: môn học,học kỳ,đợt học,khóa học
	private SemesterDto semester;
	private SubjectDto subject;
	private Integer numberRoom;
	private String description;
	private Integer numberEstimateStudent;// So luong sinh vien du kien
	private Integer numberStudent;// So luong sinh vien thuc te du thi
	private Integer numberTestBagStudent;
	private Integer duration;
	private Boolean autoGeneratedRoom;
	private Integer examRound;
	private List<SemesterSubjectExamRoomDto> listRoom;
	private List<TestBagDto> listTestBag;
	private List<StudentSemesterSubjectExamRoomDto> listStudent;
	private Integer courseSubjectCount;
	private CourseYearDto courseYearDto;
	private SemesterRegisterPeriodDto registerPeriod;
	private String registerPeriodName;
	private Set<TrainingBaseSemesterSubjectExamDto> trainingBaseSemesterSubjectExams;
	private String subjectName;//Tên môn học
	private String totalSubjectName;// Tên môn học -số tín chỉ- mã môn
	private String subjectCode;
	private ExamRegisterPeriodDto examPeriod;//đợt thi
	private String examPeriodName;
	private List<StudentSemesterSubjectExamDto> studentSemesterSubjectExams;
	private List<SemesterSubjectExamDateDto> examDates;
	private List<SemesterSubjectExamCourseSubjectDto> semesterSubjectExamCourseSubjects;
	private ExamTypeDto examType;	//Kiểu thi
	private SemesterSubjectDto semesterSubject;
	
	
	public SemesterSubjectDto getSemesterSubject() {
		return semesterSubject;
	}

	public void setSemesterSubject(SemesterSubjectDto semesterSubject) {
		this.semesterSubject = semesterSubject;
	}

	public ExamTypeDto getExamType() {
		return examType;
	}

	public void setExamType(ExamTypeDto examType) {
		this.examType = examType;
	}

	public List<StudentSemesterSubjectExamDto> getStudentSemesterSubjectExams() {
		return studentSemesterSubjectExams;
	}

	public void setStudentSemesterSubjectExams(List<StudentSemesterSubjectExamDto> studentSemesterSubjectExams) {
		this.studentSemesterSubjectExams = studentSemesterSubjectExams;
	}

	public List<SemesterSubjectExamDateDto> getExamDates() {
		return examDates;
	}

	public void setExamDates(List<SemesterSubjectExamDateDto> examDates) {
		this.examDates = examDates;
	}



	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public SemesterDto getSemester() {
		return semester;
	}

	public void setSemester(SemesterDto semester) {
		this.semester = semester;
	}

	public SubjectDto getSubject() {
		return subject;
	}

	public void setSubject(SubjectDto subject) {
		this.subject = subject;
	}

	public Integer getNumberRoom() {
		return numberRoom;
	}

	public void setNumberRoom(Integer numberRoom) {
		this.numberRoom = numberRoom;
	}

	public Boolean getAutoGeneratedRoom() {
		return autoGeneratedRoom;
	}

	public void setAutoGeneratedRoom(Boolean autoGeneratedRoom) {
		this.autoGeneratedRoom = autoGeneratedRoom;
	}

	public Integer getDuration() {
		return duration;
	}

	public void setDuration(Integer duration) {
		this.duration = duration;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Integer getNumberEstimateStudent() {
		return numberEstimateStudent;
	}

	public void setNumberEstimateStudent(Integer numberEstimateStudent) {
		this.numberEstimateStudent = numberEstimateStudent;
	}

	public Integer getNumberStudent() {
		return numberStudent;
	}

	public void setNumberStudent(Integer numberStudent) {
		this.numberStudent = numberStudent;
	}

	public List<SemesterSubjectExamRoomDto> getListRoom() {
		return listRoom;
	}

	public void setListRoom(List<SemesterSubjectExamRoomDto> listRoom) {
		this.listRoom = listRoom;
	}

	public Integer getExamRound() {
		return examRound;
	}

	public void setExamRound(Integer examRound) {
		this.examRound = examRound;
	}	
	
	public List<TestBagDto> getListTestBag() {
		return listTestBag;
	}

	public void setListTestBag(List<TestBagDto> listTestBag) {
		this.listTestBag = listTestBag;
	}

	public Integer getNumberTestBagStudent() {
		return numberTestBagStudent;
	}

	public void setNumberTestBagStudent(Integer numberTestBagStudent) {
		this.numberTestBagStudent = numberTestBagStudent;
	}

	public List<StudentSemesterSubjectExamRoomDto> getListStudent() {
		return listStudent;
	}

	public void setListStudent(List<StudentSemesterSubjectExamRoomDto> listStudent) {
		this.listStudent = listStudent;
	}

	public SemesterSubjectExamDto() {

	}
	public Integer getCourseSubjectCount() {
		return courseSubjectCount;
	}

	public void setCourseSubjectCount(Integer courseSubjectCount) {
		this.courseSubjectCount = courseSubjectCount;
	}
	
	public CourseYearDto getCourseYearDto() {
		return courseYearDto;
	}

	public void setCourseYearDto(CourseYearDto courseYearDto) {
		this.courseYearDto = courseYearDto;
	}

	public SemesterRegisterPeriodDto getRegisterPeriod() {
		return registerPeriod;
	}

	public void setRegisterPeriod(SemesterRegisterPeriodDto registerPeriod) {
		this.registerPeriod = registerPeriod;
	}
	

	public String getRegisterPeriodName() {
		return registerPeriodName;
	}

	public void setRegisterPeriodName(String registerPeriodName) {
		this.registerPeriodName = registerPeriodName;
	}
	
	public Set<TrainingBaseSemesterSubjectExamDto> getTrainingBaseSemesterSubjectExams() {
		return trainingBaseSemesterSubjectExams;
	}

	public void setTrainingBaseSemesterSubjectExams(
			Set<TrainingBaseSemesterSubjectExamDto> trainingBaseSemesterSubjectExams) {
		this.trainingBaseSemesterSubjectExams = trainingBaseSemesterSubjectExams;
	}

	public String getSubjectName() {
		return subjectName;
	}

	public void setSubjectName(String subjectName) {
		this.subjectName = subjectName;
	}

	public String getSubjectCode() {
		return subjectCode;
	}

	public void setSubjectCode(String subjectCode) {
		this.subjectCode = subjectCode;
	}
	

	public String getTotalSubjectName() {
		return totalSubjectName;
	}

	public void setTotalSubjectName(String totalSubjectName) {
		this.totalSubjectName = totalSubjectName;
	}
	
	public ExamRegisterPeriodDto getExamPeriod() {
		return examPeriod;
	}

	public void setExamPeriod(ExamRegisterPeriodDto examPeriod) {
		this.examPeriod = examPeriod;
	}
	
	public String getExamPeriodName() {
		return examPeriodName;
	}

	public void setExamPeriodName(String examPeriodName) {
		this.examPeriodName = examPeriodName;
	}

	public List<SemesterSubjectExamCourseSubjectDto> getSemesterSubjectExamCourseSubjects() {
		return semesterSubjectExamCourseSubjects;
	}

	public void setSemesterSubjectExamCourseSubjects(
			List<SemesterSubjectExamCourseSubjectDto> semesterSubjectExamCourseSubjects) {
		this.semesterSubjectExamCourseSubjects = semesterSubjectExamCourseSubjects;
	}
	public SemesterSubjectExamDto(SemesterSubjectExam sr, boolean isGetFull) {
		this(sr);
		if(isGetFull) {
			if(sr.getStudentSemesterSubjectExams()!=null) {
				this.studentSemesterSubjectExams= new ArrayList<StudentSemesterSubjectExamDto>();
				for(StudentSemesterSubjectExam ssse:sr.getStudentSemesterSubjectExams()) {
					this.studentSemesterSubjectExams.add(new StudentSemesterSubjectExamDto(ssse));
				}
			}
		}
	}
	public SemesterSubjectExamDto(SemesterSubjectExam sr) {
		if(sr!=null) {
			this.id = sr.getId();
			this.description = sr.getDescription();
			this.numberEstimateStudent = sr.getNumberEstimateStudent();
			this.numberRoom = sr.getNumberRoom();
			this.numberStudent = sr.getNumberStudent();
			this.examRound = sr.getExamRound();
			//kiểu thi
			if (sr.getExamType() != null) {
				this.examType = new ExamTypeDto(sr.getExamType());
			}
			//Học kỳ
			if (sr.getSemester() != null) {
				SemesterDto se=new SemesterDto();
				se.setId(sr.getSemester().getId());
				se.setSemesterCode(sr.getSemester().getSemesterCode());
				se.setSemesterName(sr.getSemester().getSemesterName());
				se.setDescription(sr.getSemester().getDescription());
				this.semester = se;
			}
			//Môn học
			if (sr.getSubject() != null) {
				Subject subject = sr.getSubject();
				this.subject = new SubjectDto();
				this.subject.setId(sr.getSubject().getId());
				this.subject.setSubjectCode(sr.getSubject().getSubjectCode());
				this.subject.setSubjectName(sr.getSubject().getSubjectName());
				this.subject.setSubjectNameEng(sr.getSubject().getSubjectNameEng());
				this.subject.setNumberOfCredit(sr.getSubject().getNumberOfCredit());
//				this.subject.setTotalSubjectName(sr.getSubject().getSubjectName()+ " - "+ sr.getSubject().getNumberOfCredit()+ " - "+sr.getSubject().getSubjectCode());
//				if (subject.getPrerequisiteSubjects() != null && (!subject.getPrerequisiteSubjects().isEmpty())) {
//					this.subject.setPrerequisiteSubjects(new HashSet<PrerequisiteSubjectDto>());
//					for (PrerequisiteSubject pr : subject.getPrerequisiteSubjects()) {
//						this.subject.getPrerequisiteSubjects().add(new PrerequisiteSubjectDto(pr));
//					}
//				}
				this.subjectName = sr.getSubject().getSubjectName();
				this.subjectCode = sr.getSubject().getSubjectCode();
				this.totalSubjectName=sr.getSubject().getSubjectName()+ " - "+ sr.getSubject().getNumberOfCredit()+ " - "+sr.getSubject().getSubjectCode();
			}
			
			//semesterSubject
			if (sr.getSemesterSubject() != null) {
				this.semesterSubject = new SemesterSubjectDto(sr.getSemesterSubject());
			}
			
			//Phòng thi
			if (sr.getSemesterSubjectExamRooms() != null && sr.getSemesterSubjectExamRooms().size() > 0) {
				this.listRoom = new ArrayList<SemesterSubjectExamRoomDto>();
				for (SemesterSubjectExamRoom r : sr.getSemesterSubjectExamRooms()) {
					SemesterSubjectExamRoomDto rDto = new SemesterSubjectExamRoomDto();
					rDto.setId(r.getId());
					rDto.setDuration(r.getDuration());
					rDto.setRoomCode(r.getRoomCode());
					rDto.setNumberExpectedStudent(r.getNumberExpectedStudent());
					rDto.setNumberStudent(r.getNumberStudent());
					if (r.getEndHour() != null) {
						CourseHourDto endHour = new CourseHourDto();
						endHour.setId(r.getEndHour().getId());
						endHour.setName(r.getEndHour().getName());
						endHour.setIndexNumber(r.getEndHour().getIndexNumber());
						rDto.setEndHour(endHour);
					}
					if (r.getStartHour() != null) {
						CourseHourDto start = new CourseHourDto();
						start.setId(r.getStartHour().getId());
						start.setName(r.getStartHour().getName());
						start.setIndexNumber(r.getStartHour().getIndexNumber());
						rDto.setStartHour(start);
					}
					
					if (r.getRoom() != null) {
						RoomDto roDto = new RoomDto();
						roDto.setId(r.getRoom().getId());
						roDto.setCode(r.getRoom().getCode());
						roDto.setName(r.getRoom().getName());
						rDto.setRoom(roDto); 			
					}
					if(r.getExamHour()!=null) {
						ExamHourDto ehDto=new  ExamHourDto();
						ehDto.setId(r.getExamHour().getId());
						ehDto.setStart(r.getExamHour().getStart());
						ehDto.setEnd(r.getExamHour().getEnd());
						ehDto.setType(r.getExamHour().getType());
						ehDto.setName(r.getExamHour().getName());
						ehDto.setCode(r.getExamHour().getCode());
						rDto.setExamHour(ehDto);
					}
					if(r.getExamSkill()!=null) {
						ExamSkillDto esDto=new ExamSkillDto();
						esDto.setId(r.getExamSkill().getId());
						esDto.setName(r.getExamSkill().getName());
						esDto.setCode(r.getExamSkill().getCode());
						rDto.setExamSkill(esDto);
					}
					if(r.getTrainingBase()!=null) {
						TrainingBaseDto dto =new TrainingBaseDto();
						dto.setId(r.getTrainingBase().getId());
						dto.setName(r.getTrainingBase().getName());
						dto.setCode(r.getTrainingBase().getCode());
						rDto.setTrainingBase(dto);
					}
					rDto.setRoomCode(r.getRoomCode());
					if (r.getExamDate() != null) {
						rDto.setExamDate(r.getExamDate());
					}
					rDto.setIsAddedToTestBag(r.getIsAddedToTestBag());
					rDto.setIsAddedFullToTestBag(r.getIsAddedFullToTestBag());
					listRoom.add(rDto);
				}
			}
			//Túi bài thi
			if(sr.getTestBags()!=null && sr.getTestBags().size()>0) {
				this.listTestBag = new ArrayList<TestBagDto>();
				for (TestBag bag : sr.getTestBags()) {
					TestBagDto dto = new TestBagDto();
					dto.setId(bag.getId());
					dto.setCode(bag.getCode());
					dto.setStartMarkingCode(bag.getStartMarkingCode());
					dto.setEndMarkingCode(bag.getEndMarkingCode());
					dto.setName(name);
					dto.setNumberStudent(bag.getNumberStudent());					
					listTestBag.add(dto);
				}
			}
			//Khóa học
			if(sr.getCourseyear()!=null) {
				this.courseYearDto = new CourseYearDto();
				this.courseYearDto.setId(sr.getCourseyear().getId());
				this.courseYearDto.setName(sr.getCourseyear().getName());
				this.courseYearDto.setCode(sr.getCourseyear().getCode());
				this.courseYearDto.setYear(sr.getCourseyear().getYear());
			}
			//Đợt học
			if(sr.getRegisterPeriod()!=null) {
				this.registerPeriod = new SemesterRegisterPeriodDto(sr.getRegisterPeriod(), false);
				/*this.registerPeriodName = sr.getRegisterPeriod().getName();*/
			}
			//Đợt thi
			if(sr.getExamRegisterPeriod()!=null) {
				this.examPeriod = new ExamRegisterPeriodDto(sr.getExamRegisterPeriod(),false);
				/*this.examPeriodName = sr.getExamRegisterPeriod().getName();*/
			}
			if(sr.getTrainingBaseSemesterSubjectExams()!=null && sr.getTrainingBaseSemesterSubjectExams().size()>0) {
				this.trainingBaseSemesterSubjectExams = new HashSet<TrainingBaseSemesterSubjectExamDto>();
				for(TrainingBaseSemesterSubjectExam t:sr.getTrainingBaseSemesterSubjectExams()) {
					TrainingBaseSemesterSubjectExamDto tDto = new TrainingBaseSemesterSubjectExamDto();
					tDto.setNumberOfExamRoom(t.getNumberOfExamRoom());
					if(t.getTrainingBase()!=null) {
						TrainingBaseDto trainingBase = new TrainingBaseDto();					
						trainingBase.setAddress(t.getTrainingBase().getAddress());
						trainingBase.setId(t.getTrainingBase().getId());
						trainingBase.setCode(t.getTrainingBase().getCode());
						trainingBase.setDescription(t.getTrainingBase().getDescription());
						tDto.setTrainingBase(trainingBase);
					}
					
					this.trainingBaseSemesterSubjectExams.add(tDto);
				}
			}
			//lớp học phần tổ chức trong kỳ thi
			if(sr.getSemesterSubjectExamCourseSubjects()!=null && sr.getSemesterSubjectExamCourseSubjects().size()>0) {
				this.semesterSubjectExamCourseSubjects=new ArrayList<SemesterSubjectExamCourseSubjectDto>();
				for (SemesterSubjectExamCourseSubject item : sr.getSemesterSubjectExamCourseSubjects()) {
					SemesterSubjectExamCourseSubjectDto dto= new SemesterSubjectExamCourseSubjectDto() ;
					dto.setCourseSubject(new CourseSubjectDto(item.getCourseSubject(),true));
					//dto.setSemesterSubjectExam(new SemesterSubjectExamDto(sr));
					dto.setId(item.getId());
					this.semesterSubjectExamCourseSubjects.add(dto);
				}
			}
			if(sr.getStudentSemesterSubjectExams()!=null && sr.getStudentSemesterSubjectExams().size()>0) {
				this.studentSemesterSubjectExams=new ArrayList<StudentSemesterSubjectExamDto>();
				for (StudentSemesterSubjectExam item : sr.getStudentSemesterSubjectExams()) {
					StudentSemesterSubjectExamDto dto= new StudentSemesterSubjectExamDto(item) ;
					
					this.studentSemesterSubjectExams.add(dto);
				}
			}
			if(sr.getExamDates()!=null && sr.getExamDates().size()>0) {
				this.examDates=new ArrayList<SemesterSubjectExamDateDto>();
				for (SemesterSubjectExamDate item : sr.getExamDates()) {
					SemesterSubjectExamDateDto dto= new SemesterSubjectExamDateDto(item) ;
					
					this.examDates.add(dto);
				}
			}
			if(sr.getName()==null) {
				this.name="";
				if(this.subject!=null) {
					this.name+=this.subject.getSubjectName();
				}
				if(this.semester!=null) {
					this.name+="-"+this.semester.getSemesterCode();
				}
				if(this.registerPeriod!=null) {
					this.name+="-"+this.registerPeriod.getName();
				}
				if(this.courseYearDto!=null) {
					this.name+="-"+this.courseYearDto.getCode();
				}				
			}else {
				this.name = sr.getName();
			}
		}		
	}
	
	public SemesterSubjectExamDto(SemesterSubjectExam sr,Boolean isGetFull, Boolean isGetStudentInRoom) {
		if(sr!=null) {
			this.id = sr.getId();
			this.description = sr.getDescription();
			this.numberEstimateStudent = sr.getNumberEstimateStudent();
			this.numberRoom = sr.getNumberRoom();
			this.numberStudent = sr.getNumberStudent();
			this.examRound = sr.getExamRound();
			//kiểu thi
			if (sr.getExamType() != null) {
				this.examType = new ExamTypeDto(sr.getExamType());
			}
			//Học kỳ
			if (sr.getSemester() != null) {
				SemesterDto se=new SemesterDto();
				se.setId(sr.getSemester().getId());
				se.setSemesterCode(sr.getSemester().getSemesterCode());
				se.setSemesterName(sr.getSemester().getSemesterName());
				se.setDescription(sr.getSemester().getDescription());
				this.semester = se;
			}
			//Môn học
			if (sr.getSubject() != null) {
				Subject subject = sr.getSubject();
				this.subject = new SubjectDto();
				this.subject.setId(sr.getSubject().getId());
				this.subject.setSubjectCode(sr.getSubject().getSubjectCode());
				this.subject.setSubjectName(sr.getSubject().getSubjectName());
				this.subject.setSubjectNameEng(sr.getSubject().getSubjectNameEng());
				this.subject.setNumberOfCredit(sr.getSubject().getNumberOfCredit());
//				this.subject.setTotalSubjectName(sr.getSubject().getSubjectName()+ " - "+ sr.getSubject().getNumberOfCredit()+ " - "+sr.getSubject().getSubjectCode());
//				if (subject.getPrerequisiteSubjects() != null && (!subject.getPrerequisiteSubjects().isEmpty())) {
//					this.subject.setPrerequisiteSubjects(new HashSet<PrerequisiteSubjectDto>());
//					for (PrerequisiteSubject pr : subject.getPrerequisiteSubjects()) {
//						this.subject.getPrerequisiteSubjects().add(new PrerequisiteSubjectDto(pr));
//					}
//				}
				this.subjectName = sr.getSubject().getSubjectName();
				this.subjectCode = sr.getSubject().getSubjectCode();
				this.totalSubjectName=sr.getSubject().getSubjectName()+ " - "+ sr.getSubject().getNumberOfCredit()+ " - "+sr.getSubject().getSubjectCode();
			}
			
			//semesterSubject
			if (sr.getSemesterSubject() != null) {
				this.semesterSubject = new SemesterSubjectDto(sr.getSemesterSubject());
			}
			
			//Phòng thi
			if (sr.getSemesterSubjectExamRooms() != null && sr.getSemesterSubjectExamRooms().size() > 0) {
				this.listRoom = new ArrayList<SemesterSubjectExamRoomDto>();
				for (SemesterSubjectExamRoom r : sr.getSemesterSubjectExamRooms()) {
					SemesterSubjectExamRoomDto rDto = new SemesterSubjectExamRoomDto();
					rDto.setId(r.getId());
					rDto.setDuration(r.getDuration());
					rDto.setRoomCode(r.getRoomCode());
					rDto.setNumberExpectedStudent(r.getNumberExpectedStudent());
					rDto.setNumberStudent(r.getNumberStudent());
					if (r.getEndHour() != null) {
						CourseHourDto endHour = new CourseHourDto();
						endHour.setId(r.getEndHour().getId());
						endHour.setName(r.getEndHour().getName());
						endHour.setIndexNumber(r.getEndHour().getIndexNumber());
						rDto.setEndHour(endHour);
					}
					if (r.getStartHour() != null) {
						CourseHourDto start = new CourseHourDto();
						start.setId(r.getStartHour().getId());
						start.setName(r.getStartHour().getName());
						start.setIndexNumber(r.getStartHour().getIndexNumber());
						rDto.setStartHour(start);
					}
					
					if (r.getRoom() != null) {
						RoomDto roDto = new RoomDto();
						roDto.setId(r.getRoom().getId());
						roDto.setCode(r.getRoom().getCode());
						roDto.setName(r.getRoom().getName());
						rDto.setRoom(roDto); 			
					}
					if(r.getExamHour()!=null) {
						ExamHourDto ehDto=new  ExamHourDto();
						ehDto.setId(r.getExamHour().getId());
						ehDto.setStart(r.getExamHour().getStart());
						ehDto.setEnd(r.getExamHour().getEnd());
						ehDto.setType(r.getExamHour().getType());
						ehDto.setName(r.getExamHour().getName());
						ehDto.setCode(r.getExamHour().getCode());
						rDto.setExamHour(ehDto);
					}
					if(r.getExamSkill()!=null) {
						ExamSkillDto esDto=new ExamSkillDto();
						esDto.setId(r.getExamSkill().getId());
						esDto.setName(r.getExamSkill().getName());
						esDto.setCode(r.getExamSkill().getCode());
						rDto.setExamSkill(esDto);
					}
					if(r.getTrainingBase()!=null) {
						TrainingBaseDto dto =new TrainingBaseDto();
						dto.setId(r.getTrainingBase().getId());
						dto.setName(r.getTrainingBase().getName());
						dto.setCode(r.getTrainingBase().getCode());
						rDto.setTrainingBase(dto);
					}
					rDto.setRoomCode(r.getRoomCode());
					if (r.getExamDate() != null) {
						rDto.setExamDate(r.getExamDate());
					}
					rDto.setIsAddedToTestBag(r.getIsAddedToTestBag());
					rDto.setIsAddedFullToTestBag(r.getIsAddedFullToTestBag());
					listRoom.add(rDto);
				}
			}
			//Túi bài thi
			if(sr.getTestBags()!=null && sr.getTestBags().size()>0) {
				this.listTestBag = new ArrayList<TestBagDto>();
				for (TestBag bag : sr.getTestBags()) {
					TestBagDto dto = new TestBagDto();
					dto.setId(bag.getId());
					dto.setCode(bag.getCode());
					dto.setStartMarkingCode(bag.getStartMarkingCode());
					dto.setEndMarkingCode(bag.getEndMarkingCode());
					dto.setName(name);
					dto.setNumberStudent(bag.getNumberStudent());					
					listTestBag.add(dto);
				}
			}
			//Khóa học
			if(sr.getCourseyear()!=null) {
				this.courseYearDto = new CourseYearDto();
				this.courseYearDto.setId(sr.getCourseyear().getId());
				this.courseYearDto.setName(sr.getCourseyear().getName());
				this.courseYearDto.setCode(sr.getCourseyear().getCode());
				this.courseYearDto.setYear(sr.getCourseyear().getYear());
			}
			//Đợt học
			if(sr.getRegisterPeriod()!=null) {
				this.registerPeriod = new SemesterRegisterPeriodDto(sr.getRegisterPeriod(), false);
				/*this.registerPeriodName = sr.getRegisterPeriod().getName();*/
			}
			//Đợt thi
			if(sr.getExamRegisterPeriod()!=null) {
				this.examPeriod = new ExamRegisterPeriodDto(sr.getExamRegisterPeriod(),false);
				/*this.examPeriodName = sr.getExamRegisterPeriod().getName();*/
			}
			if(sr.getTrainingBaseSemesterSubjectExams()!=null && sr.getTrainingBaseSemesterSubjectExams().size()>0) {
				this.trainingBaseSemesterSubjectExams = new HashSet<TrainingBaseSemesterSubjectExamDto>();
				for(TrainingBaseSemesterSubjectExam t:sr.getTrainingBaseSemesterSubjectExams()) {
					TrainingBaseSemesterSubjectExamDto tDto = new TrainingBaseSemesterSubjectExamDto();
					tDto.setNumberOfExamRoom(t.getNumberOfExamRoom());
					
					TrainingBaseDto trainingBase = new TrainingBaseDto();
					trainingBase.setAddress(t.getTrainingBase().getAddress());
					trainingBase.setId(t.getTrainingBase().getId());
					trainingBase.setCode(t.getTrainingBase().getCode());
					trainingBase.setDescription(t.getTrainingBase().getDescription());
					tDto.setTrainingBase(trainingBase);

					this.trainingBaseSemesterSubjectExams.add(tDto);
				}
			}
			//lớp học phần tổ chức trong kỳ thi
			if(sr.getSemesterSubjectExamCourseSubjects()!=null && sr.getSemesterSubjectExamCourseSubjects().size()>0) {
				this.semesterSubjectExamCourseSubjects=new ArrayList<SemesterSubjectExamCourseSubjectDto>();
				for (SemesterSubjectExamCourseSubject item : sr.getSemesterSubjectExamCourseSubjects()) {
					SemesterSubjectExamCourseSubjectDto dto= new SemesterSubjectExamCourseSubjectDto() ;
					dto.setCourseSubject(new CourseSubjectDto(item.getCourseSubject(),true));
					//dto.setSemesterSubjectExam(new SemesterSubjectExamDto(sr));
					dto.setId(item.getId());
					this.semesterSubjectExamCourseSubjects.add(dto);
				}
			}
			if(sr.getStudentSemesterSubjectExams()!=null && sr.getStudentSemesterSubjectExams().size()>0) {
				this.studentSemesterSubjectExams=new ArrayList<StudentSemesterSubjectExamDto>();
				for (StudentSemesterSubjectExam item : sr.getStudentSemesterSubjectExams()) {
					StudentSemesterSubjectExamDto dto= new StudentSemesterSubjectExamDto(item) ;
					
					this.studentSemesterSubjectExams.add(dto);
				}
			}
			if(sr.getExamDates()!=null && sr.getExamDates().size()>0) {
				this.examDates=new ArrayList<SemesterSubjectExamDateDto>();
				for (SemesterSubjectExamDate item : sr.getExamDates()) {
					SemesterSubjectExamDateDto dto= new SemesterSubjectExamDateDto(item,isGetStudentInRoom) ;
					
					this.examDates.add(dto);
				}
			}
			if(sr.getName()==null) {
				this.name="";
				if(this.subject!=null) {
					this.name+=this.subject.getSubjectName();
				}
				if(this.semester!=null) {
					this.name+="-"+this.semester.getSemesterCode();
				}
				if(this.registerPeriod!=null) {
					this.name+="-"+this.registerPeriod.getName();
				}
				if(this.courseYearDto!=null) {
					this.name+="-"+this.courseYearDto.getCode();
				}				
			}else {
				this.name = sr.getName();
			}
		}
		if(isGetFull) {
			if(sr.getStudentSemesterSubjectExams()!=null) {
				this.studentSemesterSubjectExams= new ArrayList<StudentSemesterSubjectExamDto>();
				for(StudentSemesterSubjectExam ssse:sr.getStudentSemesterSubjectExams()) {
					this.studentSemesterSubjectExams.add(new StudentSemesterSubjectExamDto(ssse));
				}
			}
		}
	}
}
